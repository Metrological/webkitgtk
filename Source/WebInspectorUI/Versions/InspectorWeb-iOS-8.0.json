{"domains":[
{
    "domain": "ApplicationCache",
    "types": [
        {
            "id": "ApplicationCacheResource",
            "type": "object",
            "description": "Detailed application cache resource information.",
            "properties": [
                { "name": "url", "type": "string", "description": "Resource url." },
                { "name": "size", "type": "integer", "description": "Resource size." },
                { "name": "type", "type": "string", "description": "Resource type." }
            ]
        },
        {
            "id": "ApplicationCache",
            "type": "object",
            "description": "Detailed application cache information.",
            "properties": [
                { "name": "manifestURL", "type": "string", "description": "Manifest URL." },
                { "name": "size", "type": "number", "description": "Application cache size." },
                { "name": "creationTime", "type": "number", "description": "Application cache creation time." },
                { "name": "updateTime", "type": "number", "description": "Application cache update time." },
                { "name": "resources", "type": "array", "items": { "$ref": "ApplicationCacheResource" }, "description": "Application cache resources." }
            ]
        },
        {
            "id": "FrameWithManifest",
            "type": "object",
            "description": "Frame identifier - manifest URL pair.",
            "properties": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame identifier." },
                { "name": "manifestURL", "type": "string", "description": "Manifest URL." },
                { "name": "status", "type": "integer", "description": "Application cache status." }
            ]
        }
    ],
    "commands": [
        {
            "name": "getFramesWithManifests",
            "returns": [
                { "name": "frameIds", "type": "array", "items": { "$ref": "FrameWithManifest" }, "description": "Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache." }
            ],
            "description": "Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache."
        },
        {
            "name": "enable",
            "description": "Enables application cache domain notifications."
        },
        {
            "name": "getManifestForFrame",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame containing document whose manifest is retrieved." }
            ],
            "returns": [
                { "name": "manifestURL", "type": "string", "description": "Manifest URL for document in the given frame." }
            ],
            "description": "Returns manifest URL for document in the given frame."
        },
        {
            "name": "getApplicationCacheForFrame",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame containing document whose application cache is retrieved." }
            ],
            "returns": [
                { "name": "applicationCache", "$ref": "ApplicationCache", "description": "Relevant application cache data for the document in given frame." }
            ],
            "description": "Returns relevant application cache data for the document in given frame."
        }
    ],
    "events": [
        {
            "name": "applicationCacheStatusUpdated",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame containing document whose application cache updated status." },
                { "name": "manifestURL", "type": "string", "description": "Manifest URL." },
                { "name": "status", "type": "integer", "description": "Updated application cache status." }
            ]
        },
        {
            "name": "networkStateUpdated",
            "parameters": [
                { "name": "isNowOnline", "type": "boolean" }
            ]
        }
    ]
}
,
{
    "domain": "CSS",
    "description": "This domain exposes CSS read/write operations. All CSS objects, like stylesheets, rules, and styles, have an associated <code>id</code> used in subsequent operations on the related object. Each object type has a specific <code>id</code> structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). Alternatively, a client can discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods.",
    "types": [
        {
            "id": "StyleSheetId",
            "type": "string"
        },
        {
            "id": "CSSStyleId",
            "type": "object",
            "properties": [
                { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Enclosing stylesheet identifier." },
                { "name": "ordinal", "type": "integer", "description": "The style ordinal within the stylesheet." }
            ],
            "description": "This object identifies a CSS style in a unique way."
        },
        {
            "id": "StyleSheetOrigin",
            "type": "string",
            "enum": ["user", "user-agent", "inspector", "regular"],
            "description": "Stylesheet type: \"user\" for user stylesheets, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets."
        },
        {
            "id": "CSSRuleId",
            "type": "object",
            "properties": [
                { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Enclosing stylesheet identifier." },
                { "name": "ordinal", "type": "integer", "description": "The rule ordinal within the stylesheet." }
            ],
            "description": "This object identifies a CSS rule in a unique way."
        },
        {
            "id": "PseudoIdMatches",
            "type": "object",
            "properties": [
                { "name": "pseudoId", "type": "integer", "description": "Pseudo style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>)."},
                { "name": "matches", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules applicable to the pseudo style."}
            ],
            "description": "CSS rule collection for a single pseudo style."
        },
        {
            "id": "InheritedStyleEntry",
            "type": "object",
            "properties": [
                { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "The ancestor node's inline style, if any, in the style inheritance chain." },
                { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain." }
            ],
            "description": "CSS rule collection for a single pseudo style."
        },
        {
            "id": "RuleMatch",
            "type": "object",
            "properties": [
                { "name": "rule", "$ref": "CSSRule", "description": "CSS rule in the match." },
                { "name": "matchingSelectors", "type": "array", "items": { "type": "integer" }, "description": "Matching selector indices in the rule's selectorList selectors (0-based)." }
            ],
            "description": "Match data for a CSS rule."
        },
        {
            "id": "SelectorList",
            "type": "object",
            "properties": [
                { "name": "selectors", "type": "array", "items": { "type": "string" }, "description": "Selectors in the list." },
                { "name": "text", "type": "string", "description": "Rule selector text." },
                { "name": "range", "$ref": "SourceRange", "optional": true, "description": "Rule selector range in the underlying resource (if available)." }
            ],
            "description": "Selector list data."
        },
        {
            "id": "CSSStyleAttribute",
            "type": "object",
            "properties": [
                { "name": "name", "type": "string", "description": "DOM attribute name (e.g. \"width\")."},
                { "name": "style", "$ref": "CSSStyle", "description": "CSS style generated by the respective DOM attribute."}
            ],
            "description": "CSS style information for a DOM style attribute."
        },
        {
            "id": "CSSStyleSheetHeader",
            "type": "object",
            "properties": [
                { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "The stylesheet identifier."},
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Owner frame identifier."},
                { "name": "sourceURL", "type": "string", "description": "Stylesheet resource URL."},
                { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Stylesheet origin."},
                { "name": "title", "type": "string", "description": "Stylesheet title."},
                { "name": "disabled", "type": "boolean", "description": "Denotes whether the stylesheet is disabled."}
            ],
            "description": "CSS stylesheet metainformation."
        },
        {
            "id": "CSSStyleSheetBody",
            "type": "object",
            "properties": [
                { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "The stylesheet identifier."},
                { "name": "rules", "type": "array", "items": { "$ref": "CSSRule" }, "description": "Stylesheet resource URL."},
                { "name": "text", "type": "string", "optional": true, "description": "Stylesheet resource contents (if available)."}
            ],
            "description": "CSS stylesheet contents."
        },
        {
            "id": "CSSRule",
            "type": "object",
            "properties": [
                { "name": "ruleId", "$ref": "CSSRuleId", "optional": true, "description": "The CSS rule identifier (absent for user agent stylesheet and user-specified stylesheet rules)."},
                { "name": "selectorList", "$ref": "SelectorList", "description": "Rule selector data." },
                { "name": "sourceURL", "type": "string", "optional": true, "description": "Parent stylesheet resource URL (for regular rules)."},
                { "name": "sourceLine", "type": "integer", "description": "Line ordinal of the rule selector start character in the resource."},
                { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Parent stylesheet's origin."},
                { "name": "style", "$ref": "CSSStyle", "description": "Associated style declaration." },
                { "name": "media", "type": "array", "items": { "$ref": "CSSMedia" }, "optional": true, "description": "Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards." }
            ],
            "description": "CSS rule representation."
        },
        {
            "id": "SourceRange",
            "type": "object",
            "properties": [
                { "name": "startLine", "type": "integer", "description": "Start line of range." },
                { "name": "startColumn", "type": "integer", "description": "Start column of range (inclusive)." },
                { "name": "endLine", "type": "integer", "description": "End line of range" },
                { "name": "endColumn", "type": "integer", "description": "End column of range (exclusive)." }
            ],
            "description": "Text range within a resource."
        },
        {
            "id": "ShorthandEntry",
            "type": "object",
            "properties": [
                { "name": "name", "type": "string", "description": "Shorthand name." },
                { "name": "value", "type": "string", "description": "Shorthand value." }
            ]
        },
        {
            "id": "CSSPropertyInfo",
            "type": "object",
            "properties": [
                { "name": "name", "type": "string", "description": "Property name." },
                { "name": "longhands", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Longhand property names." }
            ]
        },
        {
            "id": "CSSComputedStyleProperty",
            "type": "object",
            "properties": [
                { "name": "name", "type": "string", "description": "Computed style property name." },
                { "name": "value", "type": "string", "description": "Computed style property value." }
            ]
        },
        {
            "id": "CSSStyle",
            "type": "object",
            "properties": [
                { "name": "styleId", "$ref": "CSSStyleId", "optional": true, "description": "The CSS style identifier (absent for attribute styles)." },
                { "name": "cssProperties", "type": "array", "items": { "$ref": "CSSProperty" }, "description": "CSS properties in the style." },
                { "name": "shorthandEntries", "type": "array", "items": { "$ref": "ShorthandEntry" }, "description": "Computed values for all shorthands found in the style." },
                { "name": "cssText", "type": "string", "optional": true, "description": "Style declaration text (if available)." },
                { "name": "range", "$ref": "SourceRange", "optional": true, "description": "Style declaration range in the enclosing stylesheet (if available)." },
                { "name": "width", "type": "string", "optional": true, "description": "The effective \"width\" property value from this style." },
                { "name": "height", "type": "string", "optional": true, "description": "The effective \"height\" property value from this style." }
            ],
            "description": "CSS style representation."
        },
        {
            "id": "CSSProperty",
            "type": "object",
            "properties": [
                { "name": "name", "type": "string", "description": "The property name." },
                { "name": "value", "type": "string", "description": "The property value." },
                { "name": "priority", "type": "string", "optional": true, "description": "The property priority (implies \"\" if absent)." },
                { "name": "implicit", "type": "boolean", "optional": true, "description": "Whether the property is implicit (implies <code>false</code> if absent)." },
                { "name": "text", "type": "string", "optional": true, "description": "The full property text as specified in the style." },
                { "name": "parsedOk", "type": "boolean", "optional": true, "description": "Whether the property is understood by the browser (implies <code>true</code> if absent)." },
                { "name": "status", "type": "string", "enum": ["active", "inactive", "disabled", "style"], "optional": true, "description": "The property status: \"active\" if the property is effective in the style, \"inactive\" if the property is overridden by a same-named property in this style later on, \"disabled\" if the property is disabled by the user, \"style\" (implied if absent) if the property is reported by the browser rather than by the CSS source parser." },
                { "name": "range", "$ref": "SourceRange", "optional": true, "description": "The entire property range in the enclosing style declaration (if available)." }
            ],
            "description": "CSS style effective visual dimensions and source offsets."
        },
        {
            "id": "CSSMedia",
            "type": "object",
            "properties": [
                { "name": "text", "type": "string", "description": "Media query text." },
                { "name": "source", "type": "string", "enum": ["mediaRule", "importRule", "linkedSheet", "inlineSheet"], "description": "Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if specified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked stylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline stylesheet's STYLE tag." },
                { "name": "sourceURL", "type": "string", "optional": true, "description": "URL of the document containing the media query description." },
                { "name": "sourceLine", "type": "integer", "optional": true, "description": "Line in the document containing the media query (not defined for the \"stylesheet\" source)." }
            ],
            "description": "CSS media query descriptor."
        },
        {
            "id": "Region",
            "type": "object",
            "properties": [
                { "name": "regionOverset", "type": "string", "enum": ["overset", "fit", "empty"], "description": "The \"overset\" attribute of a Named Flow." },
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "The corresponding DOM node id." }
            ],
            "description": "This object represents a region that flows from a Named Flow."
        },
        {
            "id": "NamedFlow",
            "type": "object",
            "properties": [
                { "name": "documentNodeId", "$ref": "DOM.NodeId", "description": "The document node id." },
                { "name": "name", "type": "string", "description": "Named Flow identifier." },
                { "name": "overset", "type": "boolean", "description": "The \"overset\" attribute of a Named Flow." },
                { "name": "content", "type": "array", "items": { "$ref": "DOM.NodeId" }, "description": "An array of nodes that flow into the Named Flow." },
                { "name": "regions", "type": "array", "items": { "$ref": "Region" }, "description": "An array of regions associated with the Named Flow." }
            ],
            "description": "This object represents a Named Flow."
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received."
        },
        {
            "name": "disable",
            "description": "Disables the CSS agent for the given page."
        },
        {
            "name": "getMatchedStylesForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId" },
                { "name": "includePseudo", "type": "boolean", "optional": true, "description": "Whether to include pseudo styles (default: true)." },
                { "name": "includeInherited", "type": "boolean", "optional": true, "description": "Whether to include inherited styles (default: true)." }
            ],
            "returns": [
                { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "optional": true, "description": "CSS rules matching this node, from all applicable stylesheets." },
                { "name": "pseudoElements", "type": "array", "items": { "$ref": "PseudoIdMatches" }, "optional": true, "description": "Pseudo style matches for this node." },
                { "name": "inherited", "type": "array", "items": { "$ref": "InheritedStyleEntry" }, "optional": true, "description": "A chain of inherited styles (from the immediate node parent up to the DOM tree root)." }
            ],
            "description": "Returns requested styles for a DOM node identified by <code>nodeId</code>."
        },
        {
            "name": "getInlineStylesForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId" }
            ],
            "returns": [
                { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "Inline style for the specified DOM node." },
                { "name": "attributesStyle", "$ref": "CSSStyle", "optional": true, "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."}
            ],
            "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>."
        },
        {
            "name": "getComputedStyleForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId" }
            ],
            "returns": [
                { "name": "computedStyle", "type": "array", "items": { "$ref": "CSSComputedStyleProperty" }, "description": "Computed style for the specified DOM node." }
            ],
            "description": "Returns the computed style for a DOM node identified by <code>nodeId</code>."
        },
        {
            "name": "getAllStyleSheets",
            "returns": [
                { "name": "headers", "type": "array", "items": { "$ref": "CSSStyleSheetHeader" }, "description": "Descriptor entries for all available stylesheets." }
            ],
            "description": "Returns metainfo entries for all known stylesheets."
        },
        {
            "name": "getStyleSheet",
            "parameters": [
                { "name": "styleSheetId", "$ref": "StyleSheetId" }
            ],
            "returns": [
                { "name": "styleSheet", "$ref": "CSSStyleSheetBody", "description": "Stylesheet contents for the specified <code>styleSheetId</code>." }
            ],
            "description": "Returns stylesheet data for the specified <code>styleSheetId</code>."
        },
        {
            "name": "getStyleSheetText",
            "parameters": [
                { "name": "styleSheetId", "$ref": "StyleSheetId" }
            ],
            "returns": [
                { "name": "text", "type": "string", "description": "The stylesheet text." }
            ],
            "description": "Returns the current textual content and the URL for a stylesheet."
        },
        {
            "name": "setStyleSheetText",
            "parameters": [
                { "name": "styleSheetId", "$ref": "StyleSheetId" },
                { "name": "text", "type": "string" }
            ],
            "description": "Sets the new stylesheet text, thereby invalidating all existing <code>CSSStyleId</code>'s and <code>CSSRuleId</code>'s contained by this stylesheet."
        },
        {
            "name": "setStyleText",
            "parameters": [
                { "name": "styleId", "$ref": "CSSStyleId" },
                { "name": "text", "type": "string" }
            ],
            "returns": [
                { "name": "style", "$ref": "CSSStyle", "description": "The resulting style after the text modification." }
            ],
            "description": "Sets the new <code>text</code> for the respective style."
        },
        {
            "name": "setPropertyText",
            "parameters": [
                { "name": "styleId", "$ref": "CSSStyleId" },
                { "name": "propertyIndex", "type": "integer" },
                { "name": "text", "type": "string" },
                { "name": "overwrite", "type": "boolean" }
            ],
            "returns": [
                { "name": "style", "$ref": "CSSStyle", "description": "The resulting style after the property text modification." }
            ],
            "description": "Sets the new <code>text</code> for a property in the respective style, at offset <code>propertyIndex</code>. If <code>overwrite</code> is <code>true</code>, a property at the given offset is overwritten, otherwise inserted. <code>text</code> entirely replaces the property <code>name: value</code>."
        },
        {
            "name": "toggleProperty",
            "parameters": [
                { "name": "styleId", "$ref": "CSSStyleId" },
                { "name": "propertyIndex", "type": "integer" },
                { "name": "disable", "type": "boolean" }
            ],
            "returns": [
                { "name": "style", "$ref": "CSSStyle", "description": "The resulting style after the property toggling." }
            ],
            "description": "Toggles the property in the respective style, at offset <code>propertyIndex</code>. The <code>disable</code> parameter denotes whether the property should be disabled (i.e. removed from the style declaration). If <code>disable == false</code>, the property gets put back into its original place in the style declaration."
        },
        {
            "name": "setRuleSelector",
            "parameters": [
                { "name": "ruleId", "$ref": "CSSRuleId" },
                { "name": "selector", "type": "string" }
            ],
            "returns": [
                { "name": "rule", "$ref": "CSSRule", "description": "The resulting rule after the selector modification." }
            ],
            "description": "Modifies the rule selector."
        },
        {
            "name": "addRule",
            "parameters": [
                { "name": "contextNodeId", "$ref": "DOM.NodeId" },
                { "name": "selector", "type": "string" }
            ],
            "returns": [
                { "name": "rule", "$ref": "CSSRule", "description": "The newly created rule." }
            ],
            "description": "Creates a new empty rule with the given <code>selector</code> in a special \"inspector\" stylesheet in the owner document of the context node."
        },
        {
            "name": "getSupportedCSSProperties",
            "returns": [
                { "name": "cssProperties", "type": "array", "items": { "$ref": "CSSPropertyInfo" }, "description": "Supported property metainfo." }
            ],
            "description": "Returns all supported CSS property names."
        },
        {
            "name": "forcePseudoState",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "The element id for which to force the pseudo state." },
                { "name": "forcedPseudoClasses", "type": "array", "items": { "type": "string", "enum": ["active", "focus", "hover", "visited"] }, "description": "Element pseudo classes to force when computing the element's style." }
            ],
            "description": "Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser."
        },
        {
            "name": "getNamedFlowCollection",
            "parameters": [
                { "name": "documentNodeId", "$ref": "DOM.NodeId", "description": "The document node id for which to get the Named Flow Collection." }
            ],
            "returns": [
                { "name": "namedFlows", "type": "array", "items": { "$ref": "NamedFlow" }, "description": "An array containing the Named Flows in the document." }
            ],
            "description": "Returns the Named Flows from the document."
        }
    ],
    "events": [
        {
            "name": "mediaQueryResultChanged",
            "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features."
        },
        {
            "name": "styleSheetChanged",
            "parameters": [
                { "name": "styleSheetId", "$ref": "StyleSheetId" }
            ],
            "description": "Fired whenever a stylesheet is changed as a result of the client operation."
        },
        {
            "name": "namedFlowCreated",
            "parameters": [
                { "name": "namedFlow", "$ref": "NamedFlow", "description": "The new Named Flow." }
            ],
            "description": "Fires when a Named Flow is created."
        },
        {
            "name": "namedFlowRemoved",
            "parameters": [
                { "name": "documentNodeId", "$ref": "DOM.NodeId", "description": "The document node id." },
                { "name": "flowName", "type": "string", "description": "Identifier of the removed Named Flow." }
            ],
            "description": "Fires when a Named Flow is removed: has no associated content nodes and regions."
        },
        {
            "name": "regionOversetChanged",
            "parameters": [
                { "name": "namedFlow", "$ref": "NamedFlow", "description": "The Named Flow containing the regions whose regionOverset values changed." }
            ],
            "description": "Fires if any of the regionOverset values changed in a Named Flow's region chain."
        },
        {
            "name": "registeredNamedFlowContentElement",
            "parameters": [
                { "name": "documentNodeId", "$ref": "DOM.NodeId", "description": "The document node id." },
                { "name": "flowName", "type": "string", "description": "Named Flow identifier for which the new content element was registered." },
                { "name": "contentNodeId", "$ref": "DOM.NodeId", "description": "The node id of the registered content node." },
                { "name": "nextContentNodeId", "$ref": "DOM.NodeId", "description": "The node id of the element following the registered content node." }
            ],
            "description": "Fires when a Named Flow's has been registered with a new content node."
        },
        {
            "name": "unregisteredNamedFlowContentElement",
            "parameters": [
                { "name": "documentNodeId", "$ref": "DOM.NodeId", "description": "The document node id." },
                { "name": "flowName", "type": "string", "description": "Named Flow identifier for which the new content element was unregistered." },
                { "name": "contentNodeId", "$ref": "DOM.NodeId", "description": "The node id of the unregistered content node." }
            ],
            "description": "Fires when a Named Flow's has been registered with a new content node."
        }
    ]
}
,
{
    "domain": "DOM",
    "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>",
    "types": [
        {
            "id": "NodeId",
            "type": "integer",
            "description": "Unique DOM node identifier."
        },
        {
            "id": "BackendNodeId",
            "type": "integer",
            "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
        },
        {
            "id": "LiveRegionRelevant",
            "type": "string",
            "enum": ["additions", "removals", "text"],
            "description": "Token values of @aria-relevant attribute."
        },
        {
            "id": "Node",
            "type": "object",
            "properties": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client." },
                { "name": "nodeType", "type": "integer", "description": "<code>Node</code>'s nodeType." },
                { "name": "nodeName", "type": "string", "description": "<code>Node</code>'s nodeName." },
                { "name": "localName", "type": "string", "description": "<code>Node</code>'s localName." },
                { "name": "nodeValue", "type": "string", "description": "<code>Node</code>'s nodeValue." },
                { "name": "childNodeCount", "type": "integer", "optional": true, "description": "Child count for <code>Container</code> nodes." },
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Child nodes of this node when requested with children." },
                { "name": "attributes", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>." },
                { "name": "documentURL", "type": "string", "optional": true, "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to." },
                { "name": "baseURL", "type": "string", "optional": true, "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion." },
                { "name": "publicId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s publicId." },
                { "name": "systemId", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s systemId." },
                { "name": "internalSubset", "type": "string", "optional": true, "description": "<code>DocumentType</code>'s internalSubset." },
                { "name": "xmlVersion", "type": "string", "optional": true, "description": "<code>Document</code>'s XML version in case of XML documents." },
                { "name": "name", "type": "string", "optional": true, "description": "<code>Attr</code>'s name." },
                { "name": "value", "type": "string", "optional": true, "description": "<code>Attr</code>'s value." },
                { "name": "frameId", "$ref": "Network.FrameId", "optional": true, "description": "Frame ID for frame owner elements." },
                { "name": "contentDocument", "$ref": "Node", "optional": true, "description": "Content document for frame owner elements." },
                { "name": "shadowRoots", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Shadow root list for given element host." },
                { "name": "templateContent", "$ref": "Node", "optional": true, "description": "Content document fragment for template elements" },
                { "name": "role", "type": "string", "optional": true, "description": "Computed value for first recognized role token, default role per element, or overridden role." }
            ],
            "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
        },
        {
            "id": "EventListener",
            "type": "object",
            "properties": [
                { "name": "type", "type": "string", "description": "<code>EventListener</code>'s type." },
                { "name": "useCapture", "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
                { "name": "isAttribute", "type": "boolean", "description": "<code>EventListener</code>'s isAttribute." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
                { "name": "handlerBody", "type": "string", "description": "Event handler function body." },
                { "name": "location", "$ref": "Debugger.Location", "optional": true, "description": "Handler code location." },
                { "name": "sourceName", "type": "string", "optional": true, "description": "Source script URL." },
                { "name": "handler", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Event handler function value." }
            ],
            "description": "A structure holding event listener properties."
        },
        {
            "id": "AccessibilityProperties",
            "description": "A structure holding accessibility properties.",
            "type": "object",
            "properties": [
                { "name": "activeDescendantNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility object referenced by aria-activedescendant." },
                { "name": "busy", "type": "boolean", "optional": true, "description": "Value of @aria-busy on current or ancestor node." },
                { "name": "checked", "type": "string", "optional": true, "enum": ["true", "false", "mixed"], "description": "Checked state of certain form controls." },
                { "name": "childNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of the accessibility tree children if available." },
                { "name": "controlledNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-controls." },
                { "name": "disabled", "type": "boolean", "optional": true, "description": "Disabled state of form controls." },
                { "name": "exists", "type": "boolean", "description": "Indicates whether there is an existing AX object for the DOM node. If this is false, all the other properties will be default values." },
                { "name": "expanded", "type": "boolean", "optional": true, "description": "Expanded state." },
                { "name": "flowedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-flowto." },
                { "name": "focused", "type": "boolean", "optional": true, "description": "Focused state. Only defined on focusable elements." },
                { "name": "ignored", "type": "boolean", "optional": true, "description": "Indicates whether the accessibility of the associated AX object node is ignored, whether heuristically or explicitly." },
                { "name": "ignoredByDefault", "type": "boolean", "optional": true, "description": "State indicating whether the accessibility of the associated AX object node is ignored by default for node type." },
                { "name": "invalid", "type": "string", "optional": true, "enum": ["true", "false", "grammar", "spelling"], "description": "Invalid status of form controls." },
                { "name": "hidden", "type": "boolean", "optional": true, "description": "Hidden state. True if node or an ancestor is hidden via CSS or explicit @aria-hidden, to clarify why the element is ignored." },
                { "name": "label", "type": "string", "description": "Computed label value for the node, sometimes calculated by referencing other nodes." },
                { "name": "liveRegionAtomic", "type": "boolean", "optional": true, "description": "Value of @aria-atomic." },
                { "name": "liveRegionRelevant", "type": "array", "items": { "type": "string" }, "optional": true, "description": "Token value(s) of element's @aria-relevant attribute. Array of string values matching $ref LiveRegionRelevant. FIXME: Enum values blocked by http://webkit.org/b/133711" },
                { "name": "liveRegionStatus", "type": "string", "optional": true, "enum": ["assertive", "polite", "off"], "description": "Value of element's @aria-live attribute." },
                { "name": "mouseEventNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of node or closest ancestor node that has a mousedown, mouseup, or click event handler." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
                { "name": "ownedNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any nodes referenced via @aria-owns." },
                { "name": "parentNodeId", "$ref": "NodeId", "optional": true, "description": "<code>DOMNode</code> id of the accessibility tree parent object if available." },
                { "name": "pressed", "type": "boolean", "optional": true, "description": "Pressed state for toggle buttons." },
                { "name": "readonly", "type": "boolean", "optional": true, "description": "Readonly state of text controls." },
                { "name": "required", "type": "boolean", "optional": true, "description": "Required state of form controls." },
                { "name": "role", "type": "string", "description": "Computed value for first recognized role token, default role per element, or overridden role." },
                { "name": "selected", "type": "boolean", "optional": true, "description": "Selected state of certain form controls." },
                { "name": "selectedChildNodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Array of <code>DOMNode</code> ids of any children marked as selected." }
            ]
        },
        {
            "id": "RGBA",
            "type": "object",
            "properties": [
                { "name": "r", "type": "integer", "description": "The red component, in the [0-255] range." },
                { "name": "g", "type": "integer", "description": "The green component, in the [0-255] range." },
                { "name": "b", "type": "integer", "description": "The blue component, in the [0-255] range." },
                { "name": "a", "type": "number", "optional": true, "description": "The alpha component, in the [0-1] range (default: 1)." }
            ],
            "description": "A structure holding an RGBA color."
        },
        {
            "id": "Quad",
            "type": "array",
            "items": { "type": "number" },
            "minItems": 8,
            "maxItems": 8,
            "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
        },
        {
            "id": "HighlightConfig",
            "type": "object",
            "properties": [
                { "name": "showInfo", "type": "boolean", "optional": true, "description": "Whether the node info tooltip should be shown (default: false)." },
                { "name": "contentColor", "$ref": "RGBA", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "paddingColor", "$ref": "RGBA", "optional": true, "description": "The padding highlight fill color (default: transparent)." },
                { "name": "borderColor", "$ref": "RGBA", "optional": true, "description": "The border highlight fill color (default: transparent)." },
                { "name": "marginColor", "$ref": "RGBA", "optional": true, "description": "The margin highlight fill color (default: transparent)." }
            ],
            "description": "Configuration data for the highlighting of page elements."
        }
    ],
    "commands": [
        {
            "name": "getDocument",
            "returns": [
                { "name": "root", "$ref": "Node", "description": "Resulting node." }
            ],
            "description": "Returns the root DOM node to the caller."
        },
        {
            "name": "requestChildNodes",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get children for." },
                { "name": "depth", "type": "integer", "optional": true, "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0." }
            ],
            "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
            "name": "querySelector",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Query selector result." }
            ],
            "description": "Executes <code>querySelector</code> on a given node."
        },
        {
            "name": "querySelectorAll",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to query upon." },
                { "name": "selector", "type": "string", "description": "Selector string." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Query selector result." }
            ],
            "description": "Executes <code>querySelectorAll</code> on a given node."
        },
        {
            "name": "setNodeName",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set name for." },
                { "name": "name", "type": "string", "description": "New node's name." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New node's id." }
            ],
            "description": "Sets node name for a node with given id."
        },
        {
            "name": "setNodeValue",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set value for." },
                { "name": "value", "type": "string", "description": "New node's value." }
            ],
            "description": "Sets node value for a node with given id."
        },
        {
            "name": "removeNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to remove." }
            ],
            "description": "Removes node with given id."
        },
        {
            "name": "setAttributeValue",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attribute for." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ],
            "description": "Sets attribute for an element with given id."
        },
        {
            "name": "setAttributesAsText",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to set attributes for." },
                { "name": "text", "type": "string", "description": "Text with a number of attributes. Will parse this text using HTML parser." },
                { "name": "name", "type": "string", "optional": true, "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully." }
            ],
            "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
        },
        {
            "name": "removeAttribute",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the element to remove attribute from." },
                { "name": "name", "type": "string", "description": "Name of the attribute to remove." }
            ],
            "description": "Removes attribute with given name from an element with given id."
        },
        {
            "name": "getEventListenersForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get listeners for." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name for handler value. Handler value is not returned without this parameter specified." }
            ],
            "returns": [
                { "name": "listeners", "type": "array", "items": { "$ref": "EventListener"}, "description": "Array of relevant listeners." }
            ],
            "description": "Returns event listeners relevant to the node."
        },
        {
            "name": "getAccessibilityPropertiesForNode",
            "description": "Returns a dictionary of accessibility properties for the node.",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for which to get accessibility properties." }
            ],
            "returns": [
                { "name": "properties", "$ref": "AccessibilityProperties", "description": "Dictionary of relevant accessibility properties." }
            ]
        },
        {
            "name": "getOuterHTML",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get markup for." }
            ],
            "returns": [
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup." }
            ],
            "description": "Returns node's HTML markup."
        },
        {
            "name": "setOuterHTML",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to set markup for." },
                { "name": "outerHTML", "type": "string", "description": "Outer HTML markup to set." }
            ],
            "description": "Sets node HTML markup, returns new node id."
        },
        {
            "name": "performSearch",
            "parameters": [
                { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." },
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "optional": true, "description": "Ids of nodes to use as starting points for the search." }
            ],
            "returns": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "resultCount", "type": "integer", "description": "Number of search results." }
            ],
            "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
        },
        {
            "name": "getSearchResults",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
                { "name": "fromIndex", "type": "integer", "description": "Start index of the search result to be returned." },
                { "name": "toIndex", "type": "integer", "description": "End index of the search result to be returned." }
            ],
            "returns": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the search result nodes." }
            ],
            "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
        },
        {
            "name": "discardSearchResults",
            "parameters": [
                { "name": "searchId", "type": "string", "description": "Unique search session identifier." }
            ],
            "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
        },
        {
            "name": "requestNode",
            "parameters": [
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "JavaScript object id to convert into node." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Node id for given object." }
            ],
            "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
        },
        {
            "name": "setInspectModeEnabled",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True to enable inspection mode, false to disable it." },
                { "name": "highlightConfig", "$ref": "HighlightConfig", "optional": true, "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>." }
            ],
            "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspect' command upon element selection."
        },
        {
            "name": "highlightRect",
            "parameters": [
                { "name": "x", "type": "integer", "description": "X coordinate" },
                { "name": "y", "type": "integer", "description": "Y coordinate" },
                { "name": "width", "type": "integer", "description": "Rectangle width" },
                { "name": "height", "type": "integer", "description": "Rectangle height" },
                { "name": "color", "$ref": "RGBA", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBA", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ],
            "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
            "name": "highlightQuad",
            "parameters": [
                { "name": "quad", "$ref": "Quad", "description": "Quad to highlight" },
                { "name": "color", "$ref": "RGBA", "optional": true, "description": "The highlight fill color (default: transparent)." },
                { "name": "outlineColor", "$ref": "RGBA", "optional": true, "description": "The highlight outline color (default: transparent)." },
                { "name": "usePageCoordinates", "type": "boolean", "optional": true, "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)." }
            ],
            "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport."
        },
        {
            "name": "highlightNode",
            "parameters": [
                { "name": "highlightConfig", "$ref": "HighlightConfig", "description": "A descriptor for the highlight appearance." },
                { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "Identifier of the node to highlight." },
                { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "optional": true, "description": "JavaScript object id of the node to be highlighted." }
            ],
            "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
            "name": "hideHighlight",
            "description": "Hides DOM node highlight."
        },
        {
            "name": "highlightFrame",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Identifier of the frame to highlight." },
                { "name": "contentColor", "$ref": "RGBA", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                { "name": "contentOutlineColor", "$ref": "RGBA", "optional": true, "description": "The content box highlight outline color (default: transparent)." }
            ],
            "description": "Highlights owner element of the frame with given id."
        },
        {
            "name": "pushNodeByPathToFrontend",
            "parameters": [
                { "name": "path", "type": "string", "description": "Path to node in the proprietary format." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node for given path." }
            ],
            "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath"
        },
        {
            "name": "pushNodeByBackendIdToFrontend",
            "parameters": [
                { "name": "backendNodeId", "$ref": "BackendNodeId", "description": "The backend node id of the node." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "The pushed node's id." }
            ],
            "description": "Requests that the node is sent to the caller given its backend node id."
        },
        {
            "name": "releaseBackendNodeIds",
            "parameters": [
                { "name": "nodeGroup", "type": "string", "description": "The backend node ids group name." }
            ],
            "description": "Requests that group of <code>BackendNodeIds</code> is released."
        },
        {
            "name": "resolveNode",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to resolve." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
            ],
            "returns": [
                { "name": "object", "$ref": "Runtime.RemoteObject", "description": "JavaScript object wrapper for given node." }
            ],
            "description": "Resolves JavaScript node object for given node id."
        },
        {
            "name": "getAttributes",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to retrieve attibutes for." }
            ],
            "returns": [
                { "name": "attributes", "type": "array", "items": { "type": "string" }, "description": "An interleaved array of node attribute names and values." }
            ],
            "description": "Returns attributes for the specified node."
        },
        {
            "name": "moveTo",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to drop." },
                { "name": "targetNodeId", "$ref": "NodeId", "description": "Id of the element to drop into." },
                { "name": "insertBeforeNodeId", "$ref": "NodeId", "optional": true, "description": "Drop node before given one." }
            ],
            "returns": [
                { "name": "nodeId", "$ref": "NodeId", "description": "New id of the moved node." }
            ],
            "description": "Moves node into the new container, places it before the given anchor."
        },
        {
            "name": "undo",
            "description": "Undoes the last performed action."
        },
        {
            "name": "redo",
            "description": "Re-does the last undone action."
        },
        {
            "name": "markUndoableState",
            "description": "Marks last undoable state."
        },
        {
            "name": "focus",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to focus." }
            ],
            "description": "Focuses the given element."
        }
    ],
    "events": [
        {
            "name": "documentUpdated",
            "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
            "name": "setChildNodes",
            "parameters": [
                { "name": "parentId", "$ref": "NodeId", "description": "Parent node id to populate with children." },
                { "name": "nodes", "type": "array", "items": { "$ref": "Node"}, "description": "Child nodes array." }
            ],
            "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
            "name": "attributeModified",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "Attribute name." },
                { "name": "value", "type": "string", "description": "Attribute value." }
            ],
            "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
            "name": "attributeRemoved",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "name", "type": "string", "description": "A ttribute name." }
            ],
            "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
            "name": "inlineStyleInvalidated",
            "parameters": [
                { "name": "nodeIds", "type": "array", "items": { "$ref": "NodeId" }, "description": "Ids of the nodes for which the inline styles have been invalidated." }
            ],
            "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
        },
        {
            "name": "characterDataModified",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "characterData", "type": "string", "description": "New text value." }
            ],
            "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
            "name": "childNodeCountUpdated",
            "parameters": [
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "childNodeCount", "type": "integer", "description": "New node count." }
            ],
            "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
            "name": "childNodeInserted",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Id of the node that has changed." },
                { "name": "previousNodeId", "$ref": "NodeId", "description": "If of the previous siblint." },
                { "name": "node", "$ref": "Node", "description": "Inserted node data." }
            ],
            "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
            "name": "childNodeRemoved",
            "parameters": [
                { "name": "parentNodeId", "$ref": "NodeId", "description": "Parent id." },
                { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node that has been removed." }
            ],
            "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
            "name": "shadowRootPushed",
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "root", "$ref": "Node", "description": "Shadow root." }
            ],
            "description": "Called when shadow root is pushed into the element."
        },
        {
            "name": "shadowRootPopped",
            "parameters": [
                { "name": "hostId", "$ref": "NodeId", "description": "Host element id." },
                { "name": "rootId", "$ref": "NodeId", "description": "Shadow root id." }
            ],
            "description": "Called when shadow root is popped from the element."
        }
    ]
}
,
{
    "domain": "DOMDebugger",
    "description": "DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.",
    "types": [
        {
            "id": "DOMBreakpointType",
            "type": "string",
            "enum": ["subtree-modified", "attribute-modified", "node-removed"],
            "description": "DOM breakpoint type."
        }
    ],
    "commands": [
        {
            "name": "setDOMBreakpoint",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Identifier of the node to set breakpoint on." },
                { "name": "type", "$ref": "DOMBreakpointType", "description": "Type of the operation to stop upon." }
            ],
            "description": "Sets breakpoint on particular operation with DOM."
        },
        {
            "name": "removeDOMBreakpoint",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Identifier of the node to remove breakpoint from." },
                { "name": "type", "$ref": "DOMBreakpointType", "description": "Type of the breakpoint to remove." }
            ],
            "description": "Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>."
        },
        {
            "name": "setEventListenerBreakpoint",
            "parameters": [
                { "name": "eventName", "type": "string", "description": "DOM Event name to stop on (any DOM event will do)." }
            ],
            "description": "Sets breakpoint on particular DOM event."
        },
        {
            "name": "removeEventListenerBreakpoint",
            "parameters": [
                { "name": "eventName", "type": "string", "description": "Event name." }
            ],
            "description": "Removes breakpoint on particular DOM event."
        },
        {
            "name": "setInstrumentationBreakpoint",
            "parameters": [
                { "name": "eventName", "type": "string", "description": "Instrumentation name to stop on." }
            ],
            "description": "Sets breakpoint on particular native event."
        },
        {
            "name": "removeInstrumentationBreakpoint",
            "parameters": [
                { "name": "eventName", "type": "string", "description": "Instrumentation name to stop on." }
            ],
            "description": "Sets breakpoint on particular native event."
        },
        {
            "name": "setXHRBreakpoint",
            "parameters": [
                { "name": "url", "type": "string", "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon." }
            ],
            "description": "Sets breakpoint on XMLHttpRequest."
        },
        {
            "name": "removeXHRBreakpoint",
            "parameters": [
                { "name": "url", "type": "string", "description": "Resource URL substring." }
            ],
            "description": "Removes breakpoint from XMLHttpRequest."
        }
    ]
}
,
{
    "domain": "DOMStorage",
    "description": "Query and modify DOM storage.",
    "types": [
        {
            "id": "StorageId",
            "type": "object",
            "description": "DOM Storage identifier.",
            "properties": [
                { "name": "securityOrigin", "type": "string", "description": "Security origin for the storage." },
                { "name": "isLocalStorage", "type": "boolean", "description": "Whether the storage is local storage (not session storage)." }
            ]
        },
        {
            "id": "Item",
            "type": "array",
            "description": "DOM Storage item.",
            "items": { "type": "string" }
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables storage tracking, storage events will now be delivered to the client."
        },
        {
            "name": "disable",
            "description": "Disables storage tracking, prevents storage events from being sent to the client."
        },
        {
            "name": "getDOMStorageItems",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" }
            ],
            "returns": [
                { "name": "entries", "type": "array", "items": { "$ref": "Item" } }
            ]
        },
        {
            "name": "setDOMStorageItem",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" },
                { "name": "key", "type": "string" },
                { "name": "value", "type": "string" }
            ]
        },
        {
            "name": "removeDOMStorageItem",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" },
                { "name": "key", "type": "string" }
            ]
        }
    ],
    "events": [
        {
            "name": "domStorageItemsCleared",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" }
            ]
        },
        {
            "name": "domStorageItemRemoved",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" },
                { "name": "key", "type": "string" }
            ]
        },
        {
            "name": "domStorageItemAdded",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" },
                { "name": "key", "type": "string" },
                { "name": "newValue", "type": "string" }
            ]
        },
        {
            "name": "domStorageItemUpdated",
            "parameters": [
                { "name": "storageId", "$ref": "StorageId" },
                { "name": "key", "type": "string" },
                { "name": "oldValue", "type": "string" },
                { "name": "newValue", "type": "string" }
            ]
        }
    ]
}
,
{
    "domain": "Database",
    "types": [
        {
            "id": "DatabaseId",
            "type": "string",
            "description": "Unique identifier of Database object."
        },
        {
            "id": "Database",
            "type": "object",
            "description": "Database object.",
            "properties": [
                { "name": "id", "$ref": "DatabaseId", "description": "Database ID." },
                { "name": "domain", "type": "string", "description": "Database domain." },
                { "name": "name", "type": "string", "description": "Database name." },
                { "name": "version", "type": "string", "description": "Database version." }
            ]
        },
        {
            "id": "Error",
            "type": "object",
            "description": "Database error.",
            "properties": [
                { "name": "message", "type": "string", "description": "Error message." },
                { "name": "code", "type": "integer", "description": "Error code." }
            ]
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables database tracking, database events will now be delivered to the client."
        },
        {
            "name": "disable",
            "description": "Disables database tracking, prevents database events from being sent to the client."
        },
        {
            "name": "getDatabaseTableNames",
            "parameters": [
                { "name": "databaseId", "$ref": "DatabaseId" }
            ],
            "returns": [
                { "name": "tableNames", "type": "array", "items": { "type": "string" } }
            ]
        },
        {
            "name": "executeSQL",
            "async": true,
            "parameters": [
                { "name": "databaseId", "$ref": "DatabaseId" },
                { "name": "query", "type": "string" }
            ],
            "returns": [
                { "name": "columnNames", "type": "array", "optional": true, "items": { "type": "string" } },
                { "name": "values", "type": "array", "optional": true, "items": { "type": "any" }},
                { "name": "sqlError", "$ref": "Error", "optional": true }
            ]
        }
    ],
    "events": [
        {
            "name": "addDatabase",
            "parameters": [
                { "name": "database", "$ref": "Database" }
            ]
        }
    ]
}
,
{
    "domain": "IndexedDB",
    "types": [
        {
            "id": "DatabaseWithObjectStores",
            "type": "object",
            "description": "Database with an array of object stores.",
            "properties": [
                { "name": "name", "type": "string", "description": "Database name." },
                { "name": "version", "type": "number", "description": "Database version." },
                { "name": "objectStores", "type": "array", "items": { "$ref": "ObjectStore" }, "description": "Object stores in this database." }
            ]
        },
        {
            "id": "ObjectStore",
            "type": "object",
            "description": "Object store.",
            "properties": [
                { "name": "name", "type": "string", "description": "Object store name." },
                { "name": "keyPath", "$ref": "KeyPath", "description": "Object store key path." },
                { "name": "autoIncrement", "type": "boolean", "description": "If true, object store has auto increment flag set." },
                { "name": "indexes", "type": "array", "items": { "$ref": "ObjectStoreIndex" }, "description": "Indexes in this object store." }
            ]
        },
        {
            "id": "ObjectStoreIndex",
            "type": "object",
            "description": "Object store index.",
            "properties": [
                { "name": "name", "type": "string", "description": "Index name." },
                { "name": "keyPath", "$ref": "KeyPath", "description": "Index key path." },
                { "name": "unique", "type": "boolean", "description": "If true, index is unique." },
                { "name": "multiEntry", "type": "boolean", "description": "If true, index allows multiple entries for a key." }
            ]
        },
        {
            "id": "Key",
            "type": "object",
            "description": "Key.",
            "properties": [
                { "name": "type", "type": "string", "enum": ["number", "string", "date", "array"], "description": "Key type." },
                { "name": "number", "type": "number", "optional": true, "description": "Number value." },
                { "name": "string", "type": "string", "optional": true, "description": "String value." },
                { "name": "date", "type": "number", "optional": true, "description": "Date value." },
                { "name": "array", "type": "array", "optional": true, "items": { "$ref": "Key" }, "description": "Array value." }
            ]
        },
        {
            "id": "KeyRange",
            "type": "object",
            "description": "Key range.",
            "properties": [
                { "name": "lower", "$ref": "Key", "optional": true, "description": "Lower bound." },
                { "name": "upper", "$ref": "Key", "optional": true, "description": "Upper bound." },
                { "name": "lowerOpen", "type": "boolean", "description": "If true lower bound is open." },
                { "name": "upperOpen", "type": "boolean", "description": "If true upper bound is open." }
            ]
        },
        {
            "id": "DataEntry",
            "type": "object",
            "description": "Data entry.",
            "properties": [
                { "name": "key", "$ref": "Runtime.RemoteObject", "description": "Key." },
                { "name": "primaryKey", "$ref": "Runtime.RemoteObject", "description": "Primary key." },
                { "name": "value", "$ref": "Runtime.RemoteObject", "description": "Value." }
            ]
        },
        {
            "id": "KeyPath",
            "type": "object",
            "description": "Key path.",
            "properties": [
                { "name": "type", "type": "string", "enum": ["null", "string", "array"], "description": "Key path type." },
                { "name": "string", "type": "string", "optional": true, "description": "String value." },
                { "name": "array", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Array value." }
            ]
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables events from backend."
        },
        {
            "name": "disable",
            "description": "Disables events from backend."
        },
        {
            "name": "requestDatabaseNames",
            "async": true,
            "parameters": [
                { "name": "securityOrigin", "type": "string", "description": "Security origin." }
            ],
            "returns": [
                { "name": "databaseNames", "type": "array", "items": { "type": "string" }, "description": "Database names for origin." }
            ],
            "description": "Requests database names for given security origin."
        },
        {
            "name": "requestDatabase",
            "async": true,
            "parameters": [
                { "name": "securityOrigin", "type": "string", "description": "Security origin." },
                { "name": "databaseName", "type": "string", "description": "Database name." }
            ],
            "returns": [
                { "name": "databaseWithObjectStores", "$ref": "DatabaseWithObjectStores", "description": "Database with an array of object stores." }
            ],
            "description": "Requests database with given name in given frame."
        },
        {
            "name": "requestData",
            "async": true,
            "parameters": [
                { "name": "securityOrigin", "type": "string", "description": "Security origin." },
                { "name": "databaseName", "type": "string", "description": "Database name." },
                { "name": "objectStoreName", "type": "string", "description": "Object store name." },
                { "name": "indexName", "type": "string", "description": "Index name, empty string for object store data requests." },
                { "name": "skipCount", "type": "integer", "description": "Number of records to skip." },
                { "name": "pageSize", "type": "integer", "description": "Number of records to fetch." },
                { "name": "keyRange", "$ref": "KeyRange", "optional": true, "description": "Key range." }
            ],
            "returns": [
                { "name": "objectStoreDataEntries", "type": "array", "items": { "$ref": "DataEntry" }, "description": "Array of object store data entries." },
                { "name": "hasMore", "type": "boolean", "description": "If true, there are more entries to fetch in the given range." }
            ],
            "description": "Requests data from object store or index."
        },
        {
            "name": "clearObjectStore",
            "async": true,
            "parameters": [
                { "name": "securityOrigin", "type": "string", "description": "Security origin." },
                { "name": "databaseName", "type": "string", "description": "Database name." },
                { "name": "objectStoreName", "type": "string", "description": "Object store name." }
            ],
            "returns": [
            ],
            "description": "Clears all entries from an object store."
        }
    ]
}
,
{
    "domain": "LayerTree",
    "types": [
        {
            "id": "LayerId",
            "type": "string",
            "description": "Unique RenderLayer identifier."
        },
        {
            "id": "PseudoElementId",
            "type": "string",
            "description": "Unique PseudoElement identifier."
        },
        {
            "id": "IntRect",
            "type": "object",
            "description": "A rectangle.",
            "properties": [
                { "name": "x", "type": "integer", "description": "The x position." },
                { "name": "y", "type": "integer", "description": "The y position." },
                { "name": "width", "type": "integer", "description": "The width metric." },
                { "name": "height", "type": "integer", "description": "The height metric." }
            ]
        },
        {
            "id": "Layer",
            "type": "object",
            "description": "Information about a compositing layer.",
            "properties": [
                { "name": "layerId", "$ref": "LayerId", "description": "The unique id for this layer." },
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "The id for the node associated with this layer." },
                { "name": "bounds", "$ref": "IntRect", "description": "Bounds of the layer in absolute page coordinates." },
                { "name": "paintCount", "type": "integer", "description": "Indicates how many time this layer has painted." },
                { "name": "memory", "type": "integer", "description": "Estimated memory used by this layer." },
                { "name": "compositedBounds", "$ref": "IntRect", "description": "The bounds of the composited layer." },
                { "name": "isInShadowTree", "type": "boolean", "optional": true, "description": "Indicates whether this layer is associated with an element hosted in a shadow tree." },
                { "name": "isReflection", "type": "boolean", "optional": true, "description": "Indicates whether this layer was used to provide a reflection for the element." },
                { "name": "isGeneratedContent", "type": "boolean", "optional": true, "description": "Indicates whether the layer is attached to a pseudo element that is CSS generated content." },
                { "name": "isAnonymous", "type": "boolean", "optional": true, "description": "Indicates whether the layer was created for a CSS anonymous block or box." },
                { "name": "pseudoElementId", "$ref": "PseudoElementId", "optional": true, "description": "The id for the pseudo element associated with this layer." },
                { "name": "pseudoElement", "type": "string", "optional": true, "description": "The name of the CSS pseudo-element that prompted the layer to be generated." }
            ]
        },
        {
            "id": "CompositingReasons",
            "type": "object",
            "description": "An object containing the reasons why the layer was composited as properties.",
            "properties": [
                { "name": "transform3D", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a CSS 3D transform." },
                { "name": "video", "type": "boolean", "optional": true, "description": "Composition due to association with a <video> element." },
                { "name": "canvas", "type": "boolean", "optional": true, "description": "Composition due to the element being a <canvas> element." },
                { "name": "plugin", "type": "boolean", "optional": true, "description": "Composition due to association with a plugin." },
                { "name": "iFrame", "type": "boolean", "optional": true, "description": "Composition due to association with an <iframe> element." },
                { "name": "backfaceVisibilityHidden", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"backface-visibility: hidden\" style." },
                { "name": "clipsCompositingDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element clipping compositing descendants." },
                { "name": "animation", "type": "boolean", "optional": true, "description": "Composition due to association with an animated element." },
                { "name": "filters", "type": "boolean", "optional": true, "description": "Composition due to association with an element with CSS filters applied." },
                { "name": "positionFixed", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"position: fixed\" style." },
                { "name": "positionSticky", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"position: sticky\" style." },
                { "name": "overflowScrollingTouch", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"overflow-scrolling: touch\" style." },
                { "name": "stacking", "type": "boolean", "optional": true, "description": "Composition due to association with an element establishing a stacking context." },
                { "name": "overlap", "type": "boolean", "optional": true, "description": "Composition due to association with an element overlapping other composited elements." },
                { "name": "negativeZIndexChildren", "type": "boolean", "optional": true, "description": "Composition due to association with an element with descendants that have a negative z-index." },
                { "name": "transformWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element with composited descendants." },
                { "name": "opacityWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element with opacity applied and composited descendants." },
                { "name": "maskWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with a masked element and composited descendants." },
                { "name": "reflectionWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a reflection and composited descendants." },
                { "name": "filterWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element with CSS filters applied and composited descendants." },
                { "name": "blendingWithCompositedDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element with CSS blending applied and composited descendants." },
                { "name": "isolatesCompositedBlendingDescendants", "type": "boolean", "optional": true, "description": "Composition due to association with an element isolating compositing descendants having CSS blending applied." },
                { "name": "perspective", "type": "boolean", "optional": true, "description": "Composition due to association with an element with perspective applied." },
                { "name": "preserve3D", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"transform-style: preserve-3d\" style." },
                { "name": "root", "type": "boolean", "optional": true, "description": "Composition due to association with the root element." },
                { "name": "blending", "type": "boolean", "optional": true, "description": "Composition due to association with an element with a \"blend-mode\" style." }
            ]
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables compositing tree inspection."
        },
        {
            "name": "disable",
            "description": "Disables compositing tree inspection."
        },
        {
            "name": "layersForNode",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Root of the subtree for which we want to gather layers." }                ],
            "description": "Returns the layer tree structure of the current page.",
            "returns": [
                { "name": "layers", "type": "array", "items": { "$ref": "Layer" }, "description": "Child layers." }
            ]
        },
        {
            "name": "reasonsForCompositingLayer",
            "parameters": [
                { "name": "layerId", "$ref": "LayerId", "description": "The id of the layer for which we want to get the reasons it was composited." }
            ],
            "description": "Provides the reasons why the given layer was composited.",
            "returns": [
                { "name": "compositingReasons", "$ref": "CompositingReasons", "description": "An object containing the reasons why the layer was composited as properties." }
            ]
        }
    ],
    "events": [
        {
            "name": "layerTreeDidChange"
        }
    ]
}
,
{
    "domain": "Network",
    "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
    "types": [
        {
            "id": "LoaderId",
            "type": "string",
            "description": "Unique loader identifier."
        },
        {
            "id": "FrameId",
            "type": "string",
            "description": "Unique frame identifier."
        },
        {
            "id": "RequestId",
            "type": "string",
            "description": "Unique request identifier."
        },
        {
            "id": "Timestamp",
            "type": "number",
            "description": "Number of seconds since epoch."
        },
        {
            "id": "Headers",
            "type": "object",
            "description": "Request / response headers as keys / values of JSON object."
        },
        {
            "id": "ResourceTiming",
            "type": "object",
            "description": "Timing information for the request.",
            "properties": [
                { "name": "navigationStart", "type": "number", "description": "Timing's navigationStart is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this navigationStart." },
                { "name": "domainLookupStart", "type": "number", "description": "Started DNS address resolve." },
                { "name": "domainLookupEnd", "type": "number", "description": "Finished DNS address resolve." },
                { "name": "connectStart", "type": "number", "description": "Started connecting to the remote host." },
                { "name": "connectEnd", "type": "number", "description": "Connected to the remote host." },
                { "name": "secureConnectionStart", "type": "number", "description": "Started SSL handshake." },
                { "name": "requestStart", "type": "number", "description": "Started sending request." },
                { "name": "responseStart", "type": "number", "description": "Started receiving response headers." }
            ]
        },
        {
            "id": "Request",
            "type": "object",
            "description": "HTTP request data.",
            "properties": [
                { "name": "url", "type": "string", "description": "Request URL." },
                { "name": "method", "type": "string", "description": "HTTP request method." },
                { "name": "headers", "$ref": "Headers", "description": "HTTP request headers." },
                { "name": "postData", "type": "string", "optional": true, "description": "HTTP POST request data." }
            ]
        },
        {
            "id": "Response",
            "type": "object",
            "description": "HTTP response data.",
            "properties": [
                { "name": "url", "type": "string", "description": "Response URL. This URL can be different from CachedResource.url in case of redirect." },
                { "name": "status", "type": "number", "description": "HTTP response status code." },
                { "name": "statusText", "type": "string", "description": "HTTP response status text." },
                { "name": "headers", "$ref": "Headers", "description": "HTTP response headers." },
                { "name": "headersText", "type": "string", "optional": true, "description": "HTTP response headers text." },
                { "name": "mimeType", "type": "string", "description": "Resource mimeType as determined by the browser." },
                { "name": "requestHeaders", "$ref": "Headers", "optional": true, "description": "Refined HTTP request headers that were actually transmitted over the network." },
                { "name": "requestHeadersText", "type": "string", "optional": true, "description": "HTTP request headers text." },
                { "name": "connectionReused", "type": "boolean", "description": "Specifies whether physical connection was actually reused for this request." },
                { "name": "connectionId", "type": "number", "description": "Physical connection id that was actually used for this request." },
                { "name": "fromDiskCache", "type": "boolean", "optional": true, "description": "Specifies that the request was served from the disk cache." },
                { "name": "timing", "$ref": "ResourceTiming", "optional": true, "description": "Timing information for the given request." }
            ]
        },
        {
            "id": "WebSocketRequest",
            "type": "object",
            "description": "WebSocket request data.",
            "properties": [
                { "name": "headers", "$ref": "Headers", "description": "HTTP response headers." }
            ]
        },
        {
            "id": "WebSocketResponse",
            "type": "object",
            "description": "WebSocket response data.",
            "properties": [
                { "name": "status", "type": "number", "description": "HTTP response status code." },
                { "name": "statusText", "type": "string", "description": "HTTP response status text." },
                { "name": "headers", "$ref": "Headers", "description": "HTTP response headers." }
            ]
        },
        {
            "id": "WebSocketFrame",
            "type": "object",
            "description": "WebSocket frame data.",
            "properties": [
                { "name": "opcode", "type": "number", "description": "WebSocket frame opcode." },
                { "name": "mask", "type": "boolean", "description": "WebSocket frame mask." },
                { "name": "payloadData", "type": "string", "description": "WebSocket frame payload data." }
            ]
        },
        {
            "id": "CachedResource",
            "type": "object",
            "description": "Information about the cached resource.",
            "properties": [
                { "name": "url", "type": "string", "description": "Resource URL. This is the url of the original network request." },
                { "name": "type", "$ref": "Page.ResourceType", "description": "Type of this resource." },
                { "name": "response", "$ref": "Response", "optional": true, "description": "Cached response data." },
                { "name": "bodySize", "type": "number", "description": "Cached response body size." },
                { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with this resource (if any)." }
            ]
        },
        {
            "id": "Initiator",
            "type": "object",
            "description": "Information about the request initiator.",
            "properties": [
                { "name": "type", "type": "string", "enum": ["parser", "script", "other"], "description": "Type of this initiator." },
                { "name": "stackTrace", "$ref": "Console.StackTrace", "optional": true, "description": "Initiator JavaScript stack trace, set for Script only." },
                { "name": "url", "type": "string", "optional": true, "description": "Initiator URL, set for Parser type only." },
                { "name": "lineNumber", "type": "number", "optional": true, "description": "Initiator line number, set for Parser type only." }
            ]
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables network tracking, network events will now be delivered to the client."
        },
        {
            "name": "disable",
            "description": "Disables network tracking, prevents network events from being sent to the client."
        },
        {
            "name": "setExtraHTTPHeaders",
            "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
            "parameters": [
                { "name": "headers", "$ref": "Headers", "description": "Map with extra HTTP headers." }
            ]
        },
        {
            "name": "getResponseBody",
            "description": "Returns content served for the given request.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Identifier of the network request to get content for." }
            ],
            "returns": [
                { "name": "body", "type": "string", "description": "Response body." },
                { "name": "base64Encoded", "type": "boolean", "description": "True, if content was sent as base64." }
            ]
        },
        {
            "name": "replayXHR",
            "description": "This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Identifier of XHR to replay." }
            ]
        },
        {
            "name": "canClearBrowserCache",
            "description": "Tells whether clearing browser cache is supported.",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if browser cache can be cleared." }
            ]
        },
        {
            "name": "clearBrowserCache",
            "description": "Clears browser cache."
        },
        {
            "name": "canClearBrowserCookies",
            "description": "Tells whether clearing browser cookies is supported.",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if browser cookies can be cleared." }
            ]
        },
        {
            "name": "clearBrowserCookies",
            "description": "Clears browser cookies."
        },
        {
            "name": "setCacheDisabled",
            "parameters": [
                { "name": "cacheDisabled", "type": "boolean", "description": "Cache disabled state." }
            ],
            "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
        },
        {
            "name": "loadResource",
            "async": true,
            "parameters": [
                { "name": "frameId", "$ref": "FrameId", "description": "Frame to load the resource from." },
                { "name": "url", "type": "string", "description": "URL of the resource to load." }
            ],
            "returns": [
                { "name": "content", "type": "string", "description": "Resource content." },
                { "name": "mimeType", "type": "string", "description": "Resource mimeType." },
                { "name": "status", "type": "number", "description": "HTTP response status code." }
            ],
            "description": "Loads a resource in the context of a frame on the inspected page without cross origin checks."
        }
    ],
    "events": [
        {
            "name": "requestWillBeSent",
            "description": "Fired when page is about to send HTTP request.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "frameId", "$ref": "FrameId", "description": "Frame identifier." },
                { "name": "loaderId", "$ref": "LoaderId", "description": "Loader identifier." },
                { "name": "documentURL", "type": "string", "description": "URL of the document this request is loaded for." },
                { "name": "request", "$ref": "Request", "description": "Request data." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "initiator", "$ref": "Initiator", "description": "Request initiator." },
                { "name": "redirectResponse", "optional": true, "$ref": "Response", "description": "Redirect response data." },
                { "name": "type", "$ref": "Page.ResourceType", "optional": true, "description": "Resource type." }
            ]
        },
        {
            "name": "requestServedFromCache",
            "description": "Fired if request ended up loading from cache.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." }
            ]
        },
        {
            "name": "responseReceived",
            "description": "Fired when HTTP response is available.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "frameId", "$ref": "FrameId", "description": "Frame identifier." },
                { "name": "loaderId", "$ref": "LoaderId", "description": "Loader identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "type", "$ref": "Page.ResourceType", "description": "Resource type." },
                { "name": "response", "$ref": "Response", "description": "Response data." }
            ]
        },
        {
            "name": "dataReceived",
            "description": "Fired when data chunk was received over the network.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "dataLength", "type": "integer", "description": "Data chunk length." },
                { "name": "encodedDataLength", "type": "integer", "description": "Actual bytes received (might be less than dataLength for compressed encodings)." }
            ]
        },
        {
            "name": "loadingFinished",
            "description": "Fired when HTTP request has finished loading.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with this resource (if any)." }
            ]
        },
        {
            "name": "loadingFailed",
            "description": "Fired when HTTP request has failed to load.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "errorText", "type": "string", "description": "User friendly error message." },
                { "name": "canceled", "type": "boolean", "optional": true, "description": "True if loading was canceled." }
            ]
        },
        {
            "name": "requestServedFromMemoryCache",
            "description": "Fired when HTTP request has been served from memory cache.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "frameId", "$ref": "FrameId", "description": "Frame identifier." },
                { "name": "loaderId", "$ref": "LoaderId", "description": "Loader identifier." },
                { "name": "documentURL", "type": "string", "description": "URL of the document this request is loaded for." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "initiator", "$ref": "Initiator", "description": "Request initiator." },
                { "name": "resource", "$ref": "CachedResource", "description": "Cached resource data." }
            ]
        },
        {
            "name": "webSocketWillSendHandshakeRequest",
            "description": "Fired when WebSocket is about to initiate handshake.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "request", "$ref": "WebSocketRequest", "description": "WebSocket request data." }
            ]
        },
        {
            "name": "webSocketHandshakeResponseReceived",
            "description": "Fired when WebSocket handshake response becomes available.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "response", "$ref": "WebSocketResponse", "description": "WebSocket response data." }
            ]
        },
        {
            "name": "webSocketCreated",
            "description": "Fired upon WebSocket creation.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "url", "type": "string", "description": "WebSocket request URL." }
            ]
        },
        {
            "name": "webSocketClosed",
            "description": "Fired when WebSocket is closed.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." }
            ]
        },
        {
            "name": "webSocketFrameReceived",
            "description": "Fired when WebSocket frame is received.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "response", "$ref": "WebSocketFrame", "description": "WebSocket response data." }
            ]
        },
        {
            "name": "webSocketFrameError",
            "description": "Fired when WebSocket frame error occurs.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "errorMessage", "type": "string", "description": "WebSocket frame error message." }
            ]
        },
        {
            "name": "webSocketFrameSent",
            "description": "Fired when WebSocket frame is sent.",
            "parameters": [
                { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                { "name": "response", "$ref": "WebSocketFrame", "description": "WebSocket response data." }
            ]
        }
    ]
}
,
{
    "domain": "Page",
    "description": "Actions and events related to the inspected page belong to the page domain.",
    "types": [
        {
            "id": "ResourceType",
            "type": "string",
            "enum": ["Document", "Stylesheet", "Image", "Font", "Script", "XHR", "WebSocket", "Other"],
            "description": "Resource type as it was perceived by the rendering engine."
        },
        {
            "id": "CoordinateSystem",
            "type": "string",
            "enum": ["Viewport", "Page"],
            "description": "Coordinate system used by supplied coordinates."
        },
        {
            "id": "Frame",
            "type": "object",
            "description": "Information about the Frame on the page.",
            "properties": [
                { "name": "id", "type": "string", "description": "Frame unique identifier." },
                { "name": "parentId", "type": "string", "optional": true, "description": "Parent frame identifier." },
                { "name": "loaderId", "$ref": "Network.LoaderId", "description": "Identifier of the loader associated with this frame." },
                { "name": "name", "type": "string", "optional": true, "description": "Frame's name as specified in the tag." },
                { "name": "url", "type": "string", "description": "Frame document's URL." },
                { "name": "securityOrigin", "type": "string", "description": "Frame document's security origin." },
                { "name": "mimeType", "type": "string", "description": "Frame document's mimeType as determined by the browser." }
            ]
        },
        {
            "id": "FrameResourceTree",
            "type": "object",
            "description": "Information about the Frame hierarchy along with their cached resources.",
            "properties": [
                { "name": "frame", "$ref": "Frame", "description": "Frame information for this tree item." },
                { "name": "childFrames", "type": "array", "optional": true, "items": { "$ref": "FrameResourceTree" }, "description": "Child frames." },
                { "name": "resources", "type": "array",
                    "items": {
                        "type": "object",
                        "properties": [
                            { "name": "url", "type": "string", "description": "Resource URL." },
                            { "name": "type", "$ref": "ResourceType", "description": "Type of this resource." },
                            { "name": "mimeType", "type": "string", "description": "Resource mimeType as determined by the browser." },
                            { "name": "failed", "type": "boolean", "optional": true, "description": "True if the resource failed to load." },
                            { "name": "canceled", "type": "boolean", "optional": true, "description": "True if the resource was canceled during loading." },
                            { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with this resource (if any)." }
                        ]
                    },
                    "description": "Information about frame resources."
                }
            ]
        },
        {
            "id": "SearchResult",
            "type": "object",
            "description": "Search result for resource.",
            "properties": [
                { "name": "url", "type": "string", "description": "Resource URL." },
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Resource frame id." },
                { "name": "matchesCount", "type": "number", "description": "Number of matches in the resource content." }
            ]
        },
        {
            "id": "Cookie",
            "type": "object",
            "description": "Cookie object",
            "properties": [
                { "name": "name", "type": "string", "description": "Cookie name." },
                { "name": "value", "type": "string", "description": "Cookie value." },
                { "name": "domain", "type": "string", "description": "Cookie domain." },
                { "name": "path", "type": "string", "description": "Cookie path." },
                { "name": "expires", "type": "number", "description": "Cookie expires." },
                { "name": "size", "type": "integer", "description": "Cookie size." },
                { "name": "httpOnly", "type": "boolean", "description": "True if cookie is http-only." },
                { "name": "secure", "type": "boolean", "description": "True if cookie is secure." },
                { "name": "session", "type": "boolean", "description": "True in case of session cookie." }
            ]
        },
        {
            "id": "ScriptIdentifier",
            "type": "string",
            "description": "Unique script identifier."
        }
    ],
    "commands": [
        {
            "name": "enable",
            "description": "Enables page domain notifications."
        },
        {
            "name": "disable",
            "description": "Disables page domain notifications."
        },
        {
            "name": "addScriptToEvaluateOnLoad",
            "parameters": [
                { "name": "scriptSource", "type": "string" }
            ],
            "returns": [
                { "name": "identifier", "$ref": "ScriptIdentifier", "description": "Identifier of the added script." }
            ]
        },
        {
            "name": "removeScriptToEvaluateOnLoad",
            "parameters": [
                { "name": "identifier", "$ref": "ScriptIdentifier" }
            ]
        },
        {
            "name": "reload",
            "parameters": [
                { "name": "ignoreCache", "type": "boolean", "optional": true, "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)." },
                { "name": "scriptToEvaluateOnLoad", "type": "string", "optional": true, "description": "If set, the script will be injected into all frames of the inspected page after reload." }
            ],
            "description": "Reloads given page optionally ignoring the cache."
        },
        {
            "name": "navigate",
            "parameters": [
                { "name": "url", "type": "string", "description": "URL to navigate the page to." }
            ],
            "description": "Navigates current page to the given URL."
        },
        {
            "name": "getCookies",
            "returns": [
                { "name": "cookies", "type": "array", "items": { "$ref": "Cookie"}, "description": "Array of cookie objects." }
            ],
            "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field."
        },
        {
            "name": "deleteCookie",
            "parameters": [
                { "name": "cookieName", "type": "string", "description": "Name of the cookie to remove." },
                { "name": "url", "type": "string", "description": "URL to match cooke domain and path." }
            ],
            "description": "Deletes browser cookie with given name, domain and path."
        },
        {
            "name": "getResourceTree",
            "description": "Returns present frame / resource tree structure.",
            "returns": [
                { "name": "frameTree", "$ref": "FrameResourceTree", "description": "Present frame / resource tree structure." }
            ]
        },
        {
            "name": "getResourceContent",
            "description": "Returns content of the given resource.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id to get resource for." },
                { "name": "url", "type": "string", "description": "URL of the resource to get content for." }
            ],
            "returns": [
                { "name": "content", "type": "string", "description": "Resource content." },
                { "name": "base64Encoded", "type": "boolean", "description": "True, if content was served as base64." }
            ]
        },
        {
            "name": "searchInResource",
            "description": "Searches for given string in resource content.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id for resource to search in." },
                { "name": "url", "type": "string", "description": "URL of the resource to search in." },
                { "name": "query", "type": "string", "description": "String to search for."  },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
            ],
            "returns": [
                { "name": "result", "type": "array", "items": { "$ref": "GenericTypes.SearchMatch" }, "description": "List of search matches." }
            ]
        },
        {
            "name": "searchInResources",
            "description": "Searches for given string in frame / resource tree structure.",
            "parameters": [
                { "name": "text", "type": "string", "description": "String to search for."  },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
            ],
            "returns": [
                { "name": "result", "type": "array", "items": { "$ref": "SearchResult" }, "description": "List of search results." }
            ]
        },
        {
            "name": "setDocumentContent",
            "description": "Sets given markup as the document's HTML.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id to set HTML for." },
                { "name": "html", "type": "string", "description": "HTML content to set."  }
            ]
        },
        {
            "name": "setShowPaintRects",
            "description": "Requests that backend shows paint rectangles",
            "parameters": [
                { "name": "result", "type": "boolean", "description": "True for showing paint rectangles" }
            ]
        },
        {
            "name": "canShowDebugBorders",
            "description": "Tells if backend supports debug borders on layers",
            "returns": [
                { "name": "show", "type": "boolean", "description": "True if the debug borders can be shown" }
            ]
        },
        {
            "name": "setShowDebugBorders",
            "description": "Requests that backend shows debug borders on layers",
            "parameters": [
                { "name": "show", "type": "boolean", "description": "True for showing debug borders" }
            ]
        },
        {
            "name": "canShowFPSCounter",
            "description": "Tells if backend supports a FPS counter display",
            "returns": [
                { "name": "show", "type": "boolean", "description": "True if the FPS count can be shown" }
            ]
        },
        {
            "name": "setShowFPSCounter",
            "description": "Requests that backend shows the FPS counter",
            "parameters": [
                { "name": "show", "type": "boolean", "description": "True for showing the FPS counter" }
            ]
        },
        {
            "name": "canContinuouslyPaint",
            "description": "Tells if backend supports continuous painting",
            "returns": [
                { "name": "value", "type": "boolean", "description": "True if continuous painting is available" }
            ]
        },
        {
            "name": "setContinuousPaintingEnabled",
            "description": "Requests that backend enables continuous painting",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "True for enabling cointinuous painting" }
            ]
        },
        {
            "name": "getScriptExecutionStatus",
            "description": "Determines if scripts can be executed in the page.",
            "returns": [
                { "name": "result", "type": "string", "enum": ["allowed", "disabled", "forbidden"], "description": "Script execution status: \"allowed\" if scripts can be executed, \"disabled\" if script execution has been disabled through page settings, \"forbidden\" if script execution for the given page is not possible for other reasons." }
            ]
        },
        {
            "name": "setScriptExecutionDisabled",
            "description": "Switches script execution in the page.",
            "parameters": [
                { "name": "value", "type": "boolean", "description": "Whether script execution should be disabled in the page." }
            ]
        },
        {
            "name": "setTouchEmulationEnabled",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "Whether the touch event emulation should be enabled." }
            ],
            "description": "Toggles mouse event-based touch event emulation."
        },
        {
            "name": "setEmulatedMedia",
            "parameters": [
                { "name": "media", "type": "string", "description": "Media type to emulate. Empty string disables the override." }
            ],
            "description": "Emulates the given media for CSS media queries."
        },
        {
            "name": "getCompositingBordersVisible",
            "description": "Indicates the visibility of compositing borders.",
            "returns": [
                { "name": "result", "type": "boolean", "description": "If true, compositing borders are visible." }
            ]
        },
        {
            "name": "setCompositingBordersVisible",
            "description": "Controls the visibility of compositing borders.",
            "parameters": [
                { "name": "visible", "type": "boolean", "description": "True for showing compositing borders." }
            ]
        },
        {
            "name": "snapshotNode",
            "description": "Capture a snapshot of the specified node that does not include unrelated layers.",
            "parameters": [
                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id of the node to snapshot." }
            ],
            "returns": [
                { "name": "dataURL", "type": "string", "description": "Base64-encoded image data (PNG)." }
            ]
        },
        {
            "name": "snapshotRect",
            "description": "Capture a snapshot of the page within the specified rectangle and coordinate system.",
            "parameters": [
                { "name": "x", "type": "integer", "description": "X coordinate" },
                { "name": "y", "type": "integer", "description": "Y coordinate" },
                { "name": "width", "type": "integer", "description": "Rectangle width" },
                { "name": "height", "type": "integer", "description": "Rectangle height" },
                { "name": "coordinateSystem", "$ref": "CoordinateSystem", "description": "Indicates the coordinate system of the supplied rectangle." }
            ],
            "returns": [
                { "name": "dataURL", "type": "string", "description": "Base64-encoded image data (PNG)." }
            ]
        },
        {
            "name": "handleJavaScriptDialog",
            "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
            "parameters": [
                { "name": "accept", "type": "boolean", "description": "Whether to accept or dismiss the dialog." },
                { "name": "promptText", "type": "string", "optional": true, "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog." }
            ]
        },
        {
            "name": "archive",
            "description": "Grab an archive of the page.",
            "returns": [
                { "name": "data", "type": "string", "description": "Base64-encoded web archive." }
            ]
        }
    ],
    "events": [
        {
            "name": "domContentEventFired",
            "parameters": [
                { "name": "timestamp", "type": "number" }
            ]
        },
        {
            "name": "loadEventFired",
            "parameters": [
                { "name": "timestamp", "type": "number" }
            ]
        },
        {
            "name": "frameNavigated",
            "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
            "parameters": [
                { "name": "frame", "$ref": "Frame", "description": "Frame object." }
            ]
        },
        {
            "name": "frameDetached",
            "description": "Fired when frame has been detached from its parent.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has been detached." }
            ]
        },
        {
            "name": "frameStartedLoading",
            "description": "Fired when frame has started loading.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has started loading." }
            ]
        },
        {
            "name": "frameStoppedLoading",
            "description": "Fired when frame has stopped loading.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has stopped loading." }
            ]
        },
        {
            "name": "frameScheduledNavigation",
            "description": "Fired when frame schedules a potential navigation.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has scheduled a navigation." },
                { "name": "delay", "type": "number", "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start." }
            ]
        },
        {
            "name": "frameClearedScheduledNavigation",
            "description": "Fired when frame no longer has a scheduled navigation.",
            "parameters": [
                { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has cleared its scheduled navigation." }
            ]
        },
        {
            "name": "javascriptDialogOpening",
            "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
            "parameters": [
                { "name": "message", "type": "string", "description": "Message that will be displayed by the dialog." }
            ]
        },
        {
            "name": "javascriptDialogClosed",
            "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed."
        },
        {
            "name": "scriptsEnabled",
            "description": "Fired when the JavaScript is enabled/disabled on the page",
            "parameters": [
                { "name": "isEnabled", "type": "boolean", "description": "Whether script execution is enabled or disabled on the page." }
            ]
        }
    ]
}
,
{
    "domain": "Timeline",
    "description": "Timeline provides its clients with instrumentation records that are generated during the page runtime. Timeline instrumentation can be started and stopped using corresponding commands. While timeline is started, it is generating timeline event records.",
    "types": [
        {
            "id": "EventType",
            "type": "string",
            "enum": ["EventDispatch", "ScheduleStyleRecalculation", "RecalculateStyles", "InvalidateLayout", "Layout", "Paint", "ScrollLayer", "ResizeImage", "ParseHTML", "TimerInstall", "TimerRemove", "TimerFire", "EvaluateScript", "MarkLoad", "MarkDOMContent", "TimeStamp", "Time", "TimeEnd", "ScheduleResourceRequest", "ResourceSendRequest", "ResourceReceiveResponse", "ResourceReceivedData", "ResourceFinish", "XHRReadyStateChange", "XHRLoad", "FunctionCall", "ProbeSample", "ConsoleProfile", "GCEvent", "RequestAnimationFrame", "CancelAnimationFrame", "FireAnimationFrame", "WebSocketCreate", "WebSocketSendHandshakeRequest", "WebSocketReceiveHandshakeResponse", "WebSocketDestroy"],
            "description": "Timeline record type."
        },
        {
            "id": "TimelineEvent",
            "type": "object",
            "properties": [
                { "name": "type", "$ref": "EventType", "description": "Event type." },
                { "name": "data", "type": "object", "description": "Event data." },
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "TimelineEvent" }, "description": "Nested records." }
            ],
            "description": "Timeline record contains information about the recorded activity."
        }
    ],
    "commands": [
        {
            "name": "start",
            "parameters": [
                { "name": "maxCallStackDepth", "optional": true, "type": "integer", "description": "Samples JavaScript stack traces up to <code>maxCallStackDepth</code>, defaults to 5." }
            ],
            "description": "Starts capturing instrumentation events."
        },
        {
            "name": "stop",
            "description": "Stops capturing instrumentation events."
        }
    ],
    "events": [
        {
            "name": "eventRecorded",
            "parameters": [
                { "name": "record", "$ref": "TimelineEvent", "description": "Timeline event record data." }
            ],
            "description": "Fired for every instrumentation event while timeline is started."
        },
        {
            "name": "recordingStarted",
            "description": "Fired when recording has started."
        },
        {
            "name": "recordingStopped",
            "description": "Fired when recording has stopped."
        }
    ]
}
,
{
    "domain": "Worker",
    "types": [],
    "commands": [
        {
            "name": "enable"
        },
        {
            "name": "disable"
        },
        {
            "name": "sendMessageToWorker",
            "parameters": [
                { "name": "workerId", "type": "integer" },
                { "name": "message", "type": "object" }
            ]
        },
        {
            "name": "canInspectWorkers",
            "description": "Tells whether browser supports workers inspection.",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if browser has workers support." }
            ]
        },
        {
            "name": "connectToWorker",
            "parameters": [
                { "name": "workerId", "type": "integer" }
            ]
        },
        {
            "name": "disconnectFromWorker",
            "parameters": [
                { "name": "workerId", "type": "integer" }
            ]
        },
        {
            "name": "setAutoconnectToWorkers",
            "parameters": [
                { "name": "value", "type": "boolean" }
            ]
        }
    ],
    "events": [
        {
            "name": "workerCreated",
            "parameters": [
                { "name": "workerId", "type": "integer" },
                { "name": "url", "type": "string" },
                { "name": "inspectorConnected", "type": "boolean" }
            ]
        },
        {
            "name": "workerTerminated",
            "parameters": [
                { "name": "workerId", "type": "integer" }
            ]
        },
        {
            "name": "dispatchMessageFromWorker",
            "parameters": [
                { "name": "workerId", "type": "integer" },
                { "name": "message", "type": "object" }
            ]
        },
        {
            "name": "disconnectedFromWorker"
        }
    ]
}
]}
